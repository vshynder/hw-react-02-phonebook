{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/ContactList.js","components/Alert.js","App.js","index.js"],"names":["Filter","props","className","id","onChange","filterChange","value","filterVal","ContactForm","state","name","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","Component","ContactListItem","contactId","remove","onClick","ContactList","filter","contacts","TransitionGroup","component","map","contact","CSSTransition","key","timeout","classNames","toLocaleLowerCase","includes","Alert","isShown","info","in","style","display","App","isMounted","isAlertShown","alertMessage","removeContact","newContacts","addToLocalStorage","trim","find","handleAlert","shortid","generate","message","setTimeout","item","localStorage","setItem","JSON","stringify","parse","getItem","mountOnEnter","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebbd7d34.chunk.js","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst Filter = (props) => {\n  return (\n    <div className=\"filter\">\n      <p className=\"filter__title\">Find contacts by name</p>\n      <input\n        className=\"filter__input\"\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filterVal: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form__name\">\n          Name\n          <input\n            className=\"form__name--input\"\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label className=\"form__number\">\n          Number\n          <input\n            className=\"form__number--input\"\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button className=\"form__submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  formSubmit: PropTypes.func,\n};\n","import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ filter, contacts, remove }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact-list\">\n      {filter === \"\"\n        ? contacts.map((contact) => (\n            <CSSTransition\n              key={contact.id}\n              timeout={250}\n              classNames=\"contact-list__item\"\n            >\n              <ContactListItem\n                contactId={contact.id}\n                name={contact.name}\n                number={contact.number}\n                remove={remove}\n              />\n            </CSSTransition>\n          ))\n        : contacts\n            .filter((contact) =>\n              contact.name\n                .toLocaleLowerCase()\n                .includes(filter.toLocaleLowerCase())\n            )\n            .map((contact) => (\n              <CSSTransition\n                key={contact.id}\n                timeout={250}\n                classNames=\"contact-list__item\"\n              >\n                <ContactListItem\n                  key={contact.id}\n                  contactId={contact.id}\n                  name={contact.name}\n                  number={contact.number}\n                  remove={remove}\n                />\n              </CSSTransition>\n            ))}\n    </TransitionGroup>\n  );\n};\n\nconst ContactListItem = ({ contactId, name, number, remove }) => (\n  <li className=\"contact-list__item\">\n    <div className=\"contact-list__item--cont\">\n      <span className=\"contact-list__item--span\">{name}</span>\n      <span className=\"contact-list__item--span\">{number}</span>\n    </div>\n\n    <button\n      className=\"contact-list__remove\"\n      onClick={() => {\n        remove(contactId);\n      }}\n    >\n      {/* <div className=\"contact-list__x-left\"></div>\n      <div className=\"contact-list__x-right\"></div> */}\n    </button>\n  </li>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  remove: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Alert = ({ isShown, info }) => (\n  <CSSTransition\n    timeout={250}\n    classNames=\"alert\"\n    in={isShown}\n    style={{ display: isShown ? \"block\" : \"none\" }}\n  >\n    <div className=\"alert\">{info}</div>\n  </CSSTransition>\n);\n\nexport default Alert;\n\nAlert.propTypes = {\n  isShown: PropTypes.bool,\n  info: PropTypes.string,\n};\n","import React from \"react\";\nimport shortid from \"shortid\";\nimport Filter from \"./components/Filter\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Alert from \"./components/Alert\";\nimport \"./app.scss\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst LS_KEY = \"react-hw-3\";\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    isMounted: false,\n    isAlertShown: false,\n    alertMessage: \"\",\n  };\n\n  removeContact = (id) => {\n    const newContacts = this.state.contacts.filter(\n      (contact) => contact.id !== id\n    );\n    this.setState({\n      contacts: newContacts,\n    });\n    this.addToLocalStorage(newContacts);\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      this.handleAlert(\"Name and number must be provided.\");\n      return;\n    }\n    const check = this.state.contacts.find((contact) => contact.name === name);\n    check\n      ? this.handleAlert(\"You already have \" + name)\n      : this.setState(\n          {\n            contacts: [\n              ...this.state.contacts,\n              {\n                name,\n                number,\n                id: shortid.generate(),\n              },\n            ],\n          },\n          () => {\n            this.addToLocalStorage(this.state.contacts);\n          }\n        );\n  };\n\n  handleAlert(message) {\n    this.setState({ isAlertShown: true, alertMessage: message });\n    setTimeout(() => {\n      this.setState({ isAlertShown: false });\n    }, 3000);\n  }\n\n  addToLocalStorage(item) {\n    localStorage.setItem(LS_KEY, JSON.stringify(item));\n  }\n\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem(LS_KEY));\n    if (contacts) {\n      this.setState({\n        contacts: [...contacts],\n      });\n    }\n    this.setState({ isMounted: true });\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <CSSTransition\n          in={this.state.isMounted}\n          timeout={500}\n          classNames=\"title\"\n          mountOnEnter\n        >\n          <h2 className=\"title\">Phonebook</h2>\n        </CSSTransition>\n        <ContactForm formSubmit={this.handleSubmit} />\n        {this.state.contacts.length > 1 ? (\n          <Filter\n            filterChange={this.handleChange}\n            filterVal={this.state.filter}\n          />\n        ) : null}\n\n        <ContactList\n          filter={this.state.filter}\n          contacts={this.state.contacts}\n          remove={this.removeContact}\n        />\n        <Alert\n          isShown={this.state.isAlertShown}\n          info={this.state.alertMessage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}