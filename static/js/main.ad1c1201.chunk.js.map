{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/ContactList.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","id","onChange","filterChange","value","filterVal","ContactForm","state","name","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","Component","ContactList","filter","contacts","remove","map","contact","key","onClick","toLocaleLowerCase","includes","App","removeContact","newContacts","trim","length","alert","shortid","generate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAeeA,EAbA,SAACC,GACd,OACE,6BACE,oDACA,2BACEC,GAAG,SACHC,SAAUF,EAAMG,aAChBC,MAAOJ,EAAMK,cCyCNC,E,4MA/CbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOZ,GAAKU,EAAEE,OAAOT,S,EAI5BU,aAAe,SAACH,GACdA,EAAEI,iBACF,EAAKf,MAAMgB,WAAW,EAAKT,OAC3B,EAAKK,SAAS,CACZJ,KAAM,GACNC,OAAQ,M,uDAKV,OACE,0BAAMQ,SAAUC,KAAKJ,cACnB,sCAEE,2BACEb,GAAG,OACHC,SAAUgB,KAAKR,aACfS,KAAK,OACLf,MAAOc,KAAKX,MAAMC,QAGtB,wCAEE,2BACEP,GAAG,SACHC,SAAUgB,KAAKR,aACfS,KAAK,OACLf,MAAOc,KAAKX,MAAME,UAGtB,oD,GA1CkBW,IAAMC,WCsCjBC,EAtCK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACvC,OACE,4BACc,KAAXF,EACGC,EAASE,KAAI,SAACC,GAAD,OACX,wBAAIC,IAAKD,EAAQ1B,IACd0B,EAAQnB,KADX,KACmBmB,EAAQlB,OACzB,4BACEoB,QAAS,WACPJ,EAAOE,EAAQ1B,MAFnB,cASJuB,EACGD,QAAO,SAACI,GAAD,OACNA,EAAQnB,KACLsB,oBACAC,SAASR,EAAOO,wBAEpBJ,KAAI,SAACC,GAAD,OACH,wBAAIC,IAAKD,EAAQ1B,IACd0B,EAAQnB,KADX,KACmBmB,EAAQlB,OACzB,4BACEoB,QAAS,WACPJ,EAAOE,EAAQ1B,MAFnB,gBC2CD+B,G,kNA9DbzB,MAAQ,CACNiB,SAAU,GACVD,OAAQ,I,EAGVU,cAAgB,SAAChC,GACf,IAAMiC,EAAc,EAAK3B,MAAMiB,SAASD,QACtC,SAACI,GAAD,OAAaA,EAAQ1B,KAAOA,KAE9B,EAAKW,SAAS,CACZY,SAAUU,K,EAIdxB,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOZ,GAAKU,EAAEE,OAAOT,S,EAI5BU,aAAe,YAAuB,IAApBN,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACF,KAAhBD,EAAK2B,QAAmC,KAAlB1B,EAAO0B,OAInB,EAAK5B,MAAMiB,SAASD,QAChC,SAACI,GAAD,OAAaA,EAAQnB,OAASA,KAE1B4B,OACFC,MAAM,GAAD,OAAI7B,EAAJ,4BACL,EAAKI,SAAS,CACZY,SAAS,GAAD,mBACH,EAAKjB,MAAMiB,UADR,CAEN,CACEhB,OACAC,SACAR,GAAIqC,IAAQC,gBAdpBF,MAAM,qC,uDAqBR,OACE,6BACE,yCACA,kBAAC,EAAD,CAAarB,WAAYE,KAAKJ,eAC9B,wCACA,kBAAC,EAAD,CACEX,aAAce,KAAKR,aACnBL,UAAWa,KAAKX,MAAMgB,SAExB,kBAAC,EAAD,CACEA,OAAQL,KAAKX,MAAMgB,OACnBC,SAAUN,KAAKX,MAAMiB,SACrBC,OAAQP,KAAKe,qB,GAxDLb,IAAMC,YCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad1c1201.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = (props) => {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button>Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from \"react\";\n\nconst ContactList = ({ filter, contacts, remove }) => {\n  return (\n    <ul>\n      {filter === \"\"\n        ? contacts.map((contact) => (\n            <li key={contact.id}>\n              {contact.name}: {contact.number}\n              <button\n                onClick={() => {\n                  remove(contact.id);\n                }}\n              >\n                delete\n              </button>\n            </li>\n          ))\n        : contacts\n            .filter((contact) =>\n              contact.name\n                .toLocaleLowerCase()\n                .includes(filter.toLocaleLowerCase())\n            )\n            .map((contact) => (\n              <li key={contact.id}>\n                {contact.name}: {contact.number}\n                <button\n                  onClick={() => {\n                    remove(contact.id);\n                  }}\n                >\n                  delete\n                </button>\n              </li>\n            ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport shortid from \"shortid\";\nimport Filter from \"./components/Filter\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport \"./app.css\";\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  removeContact = (id) => {\n    const newContacts = this.state.contacts.filter(\n      (contact) => contact.id !== id\n    );\n    this.setState({\n      contacts: newContacts,\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      alert(\"Name and number must be provided\");\n      return;\n    }\n    const check = this.state.contacts.filter(\n      (contact) => contact.name === name\n    );\n    check.length\n      ? alert(`${name} is already in contacts`)\n      : this.setState({\n          contacts: [\n            ...this.state.contacts,\n            {\n              name,\n              number,\n              id: shortid.generate(),\n            },\n          ],\n        });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm formSubmit={this.handleSubmit} />\n        <h2>Contacts</h2>\n        <Filter\n          filterChange={this.handleChange}\n          filterVal={this.state.filter}\n        />\n        <ContactList\n          filter={this.state.filter}\n          contacts={this.state.contacts}\n          remove={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}